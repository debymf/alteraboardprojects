--alt_ded_mult_y CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" dedicated_multiplier_circuitry="YES" device_family="Cyclone II" dsp_block_balancing="Auto" external_stage_counter=5 input_aclr_a="ACLR0" input_aclr_b="ACLR0" input_reg_a="CLOCK0" input_reg_b="CLOCK0" level=2 output_reg="UNREGISTERED" pipeline=0 pipeline_clear="ACLR0" pipeline_reg="UNREGISTERED" representation_a="UNSIGNED" representation_b="UNSIGNED" sign_aclr_a="ACLR0" sign_aclr_b="ACLR0" sign_reg_a="CLOCK0" sign_reg_b="CLOCK0" sub_dedicated_multiplier_circuitry="YES" width_a=14 width_b=14 aclr clock dataa datab ena result signa signa_out signb signb_out
--VERSION_BEGIN 9.1 cbx_alt_ded_mult_y 2009:10:21:21:22:16:SJ cbx_cycloneii 2009:10:21:21:22:16:SJ cbx_lpm_add_sub 2009:10:21:21:22:16:SJ cbx_mgl 2009:10:21:21:37:49:SJ cbx_padd 2009:10:21:21:22:16:SJ cbx_parallel_add 2009:10:21:21:22:16:SJ cbx_stratix 2009:10:21:21:22:16:SJ cbx_stratixii 2009:10:21:21:22:16:SJ cbx_util_mgl 2009:10:21:21:22:16:SJ  VERSION_END


-- Copyright (C) 1991-2009 Altera Corporation
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, Altera MegaCore Function License 
--  Agreement, or other applicable license agreement, including, 
--  without limitation, that your use is for the sole purpose of 
--  programming logic devices manufactured by Altera and sold by 
--  Altera or its authorized distributors.  Please refer to the 
--  applicable agreement for further details.


FUNCTION cycloneii_mac_mult (aclr, clk, dataa[dataa_width-1..0], datab[datab_width-1..0], ena, signa, signb)
WITH ( dataa_clock, dataa_width, datab_clock, datab_width, signa_clock, signb_clock)
RETURNS ( dataout[dataa_width+datab_width-1..0]);
FUNCTION cycloneii_mac_out (aclr, clk, dataa[dataa_width-1..0], ena)
WITH ( dataa_width = 0, output_clock)
RETURNS ( dataout[dataa_width-1..0]);
FUNCTION dffpipe_e3c (d[27..0])
RETURNS ( q[27..0]);
FUNCTION dffpipe_l1c (d[0..0])
RETURNS ( q[0..0]);

--synthesis_resources = dsp_9bit 2 reg 2 
SUBDESIGN ded_mult_7ho1
( 
	aclr[3..0]	:	input;
	clock[3..0]	:	input;
	dataa[13..0]	:	input;
	datab[13..0]	:	input;
	ena[3..0]	:	input;
	result[27..0]	:	output;
	signa	:	input;
	signa_out	:	output;
	signb	:	input;
	signb_out	:	output;
) 
VARIABLE 
	mac_mult3 : cycloneii_mac_mult
		WITH (
			dataa_clock = "0",
			dataa_width = 14,
			datab_clock = "0",
			datab_width = 14,
			signa_clock = "0",
			signb_clock = "0"
		);
	mac_out4 : cycloneii_mac_out
		WITH (
			dataa_width = 28
		);
	pre_sign_reg : dffe;
	signb_out_reg : dffe;
	pre_result : dffpipe_e3c;
	pre_signa_out : dffpipe_l1c;
	pre_signb_out : dffpipe_l1c;
	x_dataa[13..0]	: WIRE;
	x_datab[13..0]	: WIRE;
	x_signa[0..0]	: WIRE;
	x_signb[0..0]	: WIRE;

BEGIN 
	mac_mult3.aclr = aclr[0..0];
	mac_mult3.clk = clock[0..0];
	mac_mult3.dataa[] = ( x_dataa[]);
	mac_mult3.datab[] = ( x_datab[]);
	mac_mult3.ena = ena[0..0];
	mac_mult3.signa = x_signa[];
	mac_mult3.signb = x_signb[];
	mac_out4.dataa[] = ( mac_mult3.dataout[27..0]);
	pre_sign_reg.clk = clock[0..0];
	pre_sign_reg.clrn = (! aclr[0..0]);
	pre_sign_reg.d = signa;
	pre_sign_reg.ena = ena[0..0];
	signb_out_reg.clk = clock[0..0];
	signb_out_reg.clrn = (! aclr[0..0]);
	signb_out_reg.d = signb;
	signb_out_reg.ena = ena[0..0];
	pre_result.d[27..0] = mac_out4.dataout[27..0];
	pre_signa_out.d[] = pre_sign_reg.q;
	pre_signb_out.d[] = signb_out_reg.q;
	result[] = pre_result.q[];
	signa_out = pre_signa_out.q[];
	signb_out = pre_signb_out.q[];
	x_dataa[] = dataa[];
	x_datab[] = datab[];
	x_signa[] = signa;
	x_signb[] = signb;
END;
--VALID FILE
